buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:1.2.4"
    }
}
apply plugin: 'org.liquibase.gradle'

description = 'Mimic Persistence'

configurations {
    driver
    testDatabase
}

dependencies {
    compile project(':mimic-api')
    compile libs.springBoot
    compile libs.liquibase
	
    testCompile libs.testbase
    testCompile libs.springBootTest
    testCompile libs.h2
}

// liquibase tasks

final liquibaseSource = "${projectDir}/src/main/resources/db"
final sqlTarget = "${buildDir}/sql"

final databases = [
        mysql: [
                version: '5.1.38'
        ],
        oracle: [
                version: '11.2.0.4'
        ]
//        ,
//        postgresql: [
//                version: '9.3.9'
//        ]
]

def dbTasks=[]

liquibase {

    def dir = file(liquibaseSource)

    databases.each { database ->

        // create SQL/DDL scripts for all liquibase changelogs and supported databases

        def db = database.key
        def version = database.value.version
        def query = '&' + database.value.get('parameters', [:]).collect { it }.join('&')
        def filenamePattern = /(.+)\.([^\.]+)$/

        dir.eachFile { f ->
            if (f.isFile() && f.name.endsWith(".xml")) {

                def matcher = f.name =~ filenamePattern
                if (matcher.matches()) {
                    def sourceName = matcher[0][1]
                    def activityId = db + '#' + sourceName

                    activities.create(activityId, {
                        changeLogFile f
                        url "offline:${db}?version=${version}&outputLiquibaseSql=none&changeLogFile=${sqlTarget}/${db}/changelog.csv${query}"
                        outputFile "${sqlTarget}/${db}/${db}-${sourceName}.sql"
                        changeLogParameters parameters
                    })

                    dbTasks.add(activityId)
                }
            }
        }
    }
}

task createSql(dependsOn: clean) {
    group = 'Database Scripts'
    description= 'Create DDL/SQL scripts for each supported database'

    doLast {
        databases.each { database ->
            def db = database.key
            def dbDir=new File("${sqlTarget}/${db}")
            dbDir.mkdirs()
        }
        liquibase {
            runList = dbTasks.join(',')
        }
        tasks.updateSQL.execute()
    }
}

task createSqlZip(type: Zip, dependsOn: createSql) {

    group = 'Test Database'
    description= 'Bundle database scripts as ZIP artefact'

    classifier 'sql'
    from file(sqlTarget)
    destinationDir project.buildDir
}

artifacts {
    archives createSqlZip
}

assemble.dependsOn createSqlZip
