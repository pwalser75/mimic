buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'nebula-aggregate-javadocs'

defaultTasks 'clean', 'build'

def appTitle = 'Mimic'
def appVendor = 'frostnova.ch'

allprojects {
}

subprojects {
    apply plugin: 'java'

    group = 'ch.frostnova.mimic'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
    }

    jar { duplicatesStrategy = 'exclude' }

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    def dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    def buildDate = java.time.LocalDateTime.now()

    plugins.withType(JavaPlugin) {
        jar {
            manifest {
                attributes(
                        "Name": project.name,
                        "Version": project.version,
                        "Build-Date": dateTimeFormat.format(buildDate),
                        "Implementation-Title": appTitle,
                        "Implementation-Version": project.version,
                        "Implementation-Vendor": appVendor
                )
            }
        }
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

ext {
    springVersion = '1.5.10.RELEASE'

    libs = [
            jee               : "javax:javaee-api:7.0",
            testbase          : [
                    "junit:junit:4.12",
                    "org.mockito:mockito-core:2.12.0"
            ],
            springBoot        : [
                    "org.springframework.boot:spring-boot-starter-jersey:${springVersion}",
                    "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}",
                    'javax.el:javax.el-api:2.2.4',
                    'org.glassfish.web:javax.el:2.2.4'
            ],
            springBootActuator: [
                    "org.springframework.boot:spring-boot-starter-actuator:${springVersion}",
                    "org.springframework.boot:spring-boot-starter-web:${springVersion}"
            ],
            springBootTest    : [
                    "org.springframework.boot:spring-boot-starter-test:${springVersion}"
            ],
            hsqldb            : [
                    "org.hsqldb:hsqldb:2.4.0"
            ],
            swagger           : [
                    'io.swagger:swagger-jersey2-jaxrs:1.5.17'
            ],
            frostnova         : [
                    check: "ch.frostnova:check:1.0.0-RC1"
            ]
    ]
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task start(dependsOn: ':mimic-web:bootRun') {
    group = 'Start/Run'
    description = 'Start the Mimic server'
}

